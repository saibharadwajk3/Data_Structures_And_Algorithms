import java.util.*;
class Pair<U, V>
{
    public final U first;       // first field of a pair
    public final V second;      // second field of a pair
 
    // Constructs a new Pair with specified values
    private Pair(U first, V second)
    {
        this.first = first;
        this.second = second;
    }
 
    // Factory method for creating a Typed Pair immutable instance
    public static <U, V> Pair <U, V> of(U a, V b)
    {
        // calls private constructor
        return new Pair<>(a, b);
    }
}

public class BinarySearchTree{
   //instance variable 
private TreeNode root;
  
  
//inner class  for TreeNode creation (blue print)  
private class TreeNode{
    //instance variables 
    private TreeNode left;
    private TreeNode right;
    private int data;
    //constructor 
    TreeNode(int data){
      this.data=data;  
    }
}

//create BST

public void CreateTree(int value){
    root=CreateTree(root,value);
}
public TreeNode CreateTree(TreeNode root,int value){
    
    if(root==null){
        
        root= new TreeNode(value);
        return root;
    }
    
    if(value<root.data){
        root.left=CreateTree(root.left,value);
    }else{
        root.right=CreateTree(root.right,value);
    }
    
    return root;
}

//search BST
public TreeNode Search(TreeNode root,int key){
    
    if(root==null || root.data==key){
        
        return root;
    }
    
    if(key<root.data){
        return Search(root.left,key);
    }else{
        return Search(root.right,key);
    }
    

}

//in-order
public void inOrder(){
    inOrder(root);
}

public void inOrder(TreeNode root ){
    
    if(root==null){
        return;
    }
    
    inOrder(root.left);
    System.out.print(root.data + " ");
    inOrder(root.right);
}


//left view
int maxlevel=-1;
public void leftView(TreeNode root,int level){
    if(root==null)
    return;
    
    if(maxlevel<level){
        System.out.print(root.data+" ");
        maxlevel=level;
    }
    
    leftView(root.left,level+1);
    leftView(root.right,level+1);
    
}
//right view
int maxlevel2=-1;
public void rightView(TreeNode root,int level){
    if(root==null)
    return;
    
    if(maxlevel2<level){
        System.out.print(root.data+" ");
        maxlevel2=level;
    }
    
    rightView(root.right,level+1);
    rightView(root.left,level+1);
    
}



//bottom view

 public static void printBottom(TreeNode root, int dist, int level,
                                Map<Integer, Pair<Integer, Integer>> map)
    {
        if (root == null) {
            return;
        }
        if (!map.containsKey(dist) ||map.get(dist).second<level)
        {
            map.put(dist, Pair.of(root.data, level));
        }
        printBottom(root.left, dist - 1, level + 1, map);
        printBottom(root.right, dist + 1, level + 1, map);
    }
public static void printBottom(TreeNode root)
    {
        Map<Integer, Pair<Integer, Integer>> map = new TreeMap<>();
        printBottom(root, 0, 0, map);
        for (Pair<Integer, Integer> it: map.values()) {
            System.out.print(it.first + " ");
        }
    }
//top view
 public static void printTop(TreeNode root, int dist, int level,
                                Map<Integer, Pair<Integer, Integer>> map)
    {
        if (root == null) {
            return;
        }
        if (!map.containsKey(dist) ||map.get(dist).second>level)
        {
            map.put(dist, Pair.of(root.data, level));
        }
        printTop(root.left, dist - 1, level + 1, map);
        printTop(root.right, dist + 1, level + 1, map);
    }
public static void printTop(TreeNode root)
    {
        Map<Integer, Pair<Integer, Integer>> map = new TreeMap<>();
        printTop(root, 0, 0, map);
        for (Pair<Integer, Integer> it: map.values()) {
            System.out.print(it.first + " ");
        }
    }



//dreiver code

//       8
//     /    \
//    3      10
//   / \    / \
//  1   6     14
//     / \    
//    4   7 

///minimum value is
public void minValue(TreeNode node)
    {
        if(node==null){
            return ;
        }
        
        if(node.left==null){
            System.out.println("minimum value is " + node.data);
        }else{
            minValue(node.left);
            
        }
        
        
     
    }
    
//max value is
public void maxValue(TreeNode node)
    {
        if(node==null){
            return ;
        }
        
        if(node.right==null){
            System.out.println("maximum value is " + node.data);
        }else{
            maxValue(node.right);
            
        }
    }
    
    //is a tree bst
    public boolean isBST(TreeNode root,int min,int max){
        if(root==null){
            return true;
        }
        if(root.data>min&&
           root.data<max &&
           isBST(root.left,min,root.data)&&
           isBST(root.right,root.data,max)
        )
            return true;
        else
            return false;
    }

public static void main(String [] args){
    
    BinarySearchTree bst=new BinarySearchTree();
    bst.CreateTree(8);
    bst.CreateTree(3);
    bst.CreateTree(10);
    bst.CreateTree(1);
    bst.CreateTree(6);
    bst.CreateTree(14);
    bst.CreateTree(4);
    bst.CreateTree(7);
    
       System.out.println(bst.Search(bst.root,10)==null?"key not found":"key found");
       
     bst.inOrder();
     System.out.println();
     System.out.println("Left view");
     bst.leftView(bst.root,0);
     System.out.println();
      System.out.println("Right view:");
     bst.rightView(bst.root,0);
     System.out.println();
      System.out.println("Bottom view:");
      bst.printBottom(bst.root);
      System.out.println();
      System.out.println("Top view:");
      bst.printTop(bst.root);
      
      System.out.println();
      bst.minValue(bst.root);
      
      System.out.println();
      bst.maxValue(bst.root);
      
      
    System.out.println(bst.isBST(bst.root,Integer.MIN_VALUE,Integer.MsAX_VALUE)==true?"The given tree is BST":"The given tree is not a BST");
    
}
}