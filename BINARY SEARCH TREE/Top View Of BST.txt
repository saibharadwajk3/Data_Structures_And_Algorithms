

//top view
 public static void printTop(TreeNode root, int dist, int level,
                                Map<Integer, Pair<Integer, Integer>> map)
    {
        if (root == null) {
            return;
        }
        if (!map.containsKey(dist) ||map.get(dist).second>level)
        {
            map.put(dist, Pair.of(root.data, level));
        }
        printTop(root.left, dist - 1, level + 1, map);
        printTop(root.right, dist + 1, level + 1, map);
    }
public static void printTop(TreeNode root)
    {
        Map<Integer, Pair<Integer, Integer>> map = new TreeMap<>();
        printTop(root, 0, 0, map);
        for (Pair<Integer, Integer> it: map.values()) {
            System.out.print(it.first + " ");
        }
    }
























class Pair<U, V>
{
    public final U first;       // first field of a pair
    public final V second;      // second field of a pair
 
    // Constructs a new Pair with specified values
    private Pair(U first, V second)
    {
        this.first = first;
        this.second = second;
    }
 
    // Factory method for creating a Typed Pair immutable instance
    public static <U, V> Pair <U, V> of(U a, V b)
    {
        // calls private constructor
        return new Pair<>(a, b);
    }
}